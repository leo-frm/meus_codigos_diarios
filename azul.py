# -*- coding: utf-8 -*-
"""Azul.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13F47uKzPwVlNv9GVBeasnCZhrOQwC7VT
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# data = pd.read_excel('AzulDataSample.xlsx')

D0D14= pd.read_excel('AzulDataSample.xlsx', sheet_name='D0D14')
APURState = pd.read_excel('AzulDataSample.xlsx', sheet_name='APUReportState')
APULStart = pd.read_excel('AzulDataSample.xlsx', sheet_name='APULastStart')

# print(D0D14)
# print(APURState)
# print(APULStart)

#create Flight Key
date = APURState['TransitStartUTC'].astype(str).str.split(' ').str[0]
formatted_date = date.str.replace('-', '')

common_flights = pd.merge(APURState, APULStart, left_on='Flightid', right_on='FlightID', how='inner')

# Filter original DataFrames based on the common flight numbers
APURState_filtered = APURState[APURState['Flightid'].isin(common_flights['Flightid'])]


flight_number = APURState_filtered['FlightNumber'].astype(str)
DepartureStation = APURState_filtered['DepartureStation'].astype(str)
ArrivalStation = APURState_filtered['ArrivalStation'].astype(str)
APURState_filtered['FlightKey'] = 'AD'+formatted_date.astype(str)+flight_number+DepartureStation+ArrivalStation

APURState_filtered_merged = pd.merge(APURState_filtered, D0D14, left_on='FlightKey', right_on='FLIGHT_KEY_UTC', how='inner')

# print(APURState_filtered['FlightKey'])
# print(APURState_filtered['ApuUseMinute'])
APURState_filtered_merged.to_excel('APURState_filtered_merged.xlsx')

#data analysis
delay = APURState_filtered_merged['DELAY_DEPARTURE_MIN']

# Create a histogram of the delay data
plt.figure(figsize=(10, 6))
plt.title('Histogram of Delay Departure Minutes')
plt.hist(delay, bins=30, edgecolor='black', alpha=0.7)
plt.xlabel('Delay Departure Minutes')
plt.ylabel('Frequency')

#STD of delay
print(APURState_filtered_merged['DELAY_DEPARTURE_MIN'].describe())

# Create a route column: e.g., "JFK -> LAX"
APURState_filtered_merged['ROUTE'] = (
    APURState_filtered_merged['DepartureStation'] + ' -> ' + APURState_filtered_merged['ArrivalStation']
)


# Group by route and calculate average delay
route_delays = APURState_filtered_merged.groupby('ROUTE')['DELAY_DEPARTURE_MIN'].mean().sort_values(ascending=False)



plt.figure(figsize=(12, 6))
route_delays.plot(kind='bar', color='skyblue', edgecolor='black')

plt.title('Average Departure Delay by Route')
plt.xlabel('Route')
plt.ylabel('Average Delay (min)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Filter for routes with average delay > 14 minutes
high_delay_routes = route_delays[route_delays > 14]
d_14_routes = route_delays[(route_delays > 0) & (route_delays <= 14)]
d0_routes = route_delays[route_delays <= 0]


# Print those routes
print(high_delay_routes)

# Plot only those routes
plt.figure(figsize=(12, 6))
high_delay_routes.plot(kind='bar', color='salmon', edgecolor='black')

plt.title('Routes with Average Departure Delay > 14 Minutes')
plt.xlabel('Route')
plt.ylabel('Average Delay (min)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

print('D14+ \n',len(high_delay_routes))
print(high_delay_routes.describe())

print('D14 \n',len(d_14_routes))
print(d_14_routes.describe())

print('D0 \n',len(d0_routes))
print(d0_routes.describe())

high_delay_df = APURState_filtered_merged[
    APURState_filtered_merged['ROUTE'].isin(high_delay_routes.index)
]

average_apu_usage = high_delay_df['ApuUseMinute'].mean()
print(f"Average APU usage (min) for high-delay routes: {average_apu_usage:.2f}")

# Plot APU usage for high-delay routes
plt.figure(figsize=(12, 6))
high_delay_df.groupby('ROUTE')['ApuUseMinute'].mean().plot(kind='bar', color='lightgreen', edgecolor='black')
plt.title('Average APU Usage for High-Delay Routes')
plt.xlabel('Route')
plt.ylabel('Average APU Usage (min)')

# === Medium Delay Routes (0 < delay ≤ 14) ===
d_14_df = APURState_filtered_merged[
    APURState_filtered_merged['ROUTE'].isin(d_14_routes.index)
]

avg_apu_d14 = d_14_df['ApuUseMinute'].mean()
print(f"Medium Delay Routes (0–14 min): Avg APU Usage = {avg_apu_d14:.2f} min")

plt.figure(figsize=(12, 6))
d_14_df.groupby('ROUTE')['ApuUseMinute'].mean().plot(kind='bar', color='gold', edgecolor='black')
plt.title('Average APU Usage for Medium-Delay Routes')
plt.xlabel('Route')
plt.ylabel('Average APU Usage (min)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()


# === No Delay or Early Departure Routes (≤ 0) ===
d0_df = APURState_filtered_merged[
    APURState_filtered_merged['ROUTE'].isin(d0_routes.index)
]

avg_apu_d0 = d0_df['ApuUseMinute'].mean()
print(f"No Delay Routes (≤ 0 min): Avg APU Usage = {avg_apu_d0:.2f} min")

plt.figure(figsize=(12, 6))
d0_df.groupby('ROUTE')['ApuUseMinute'].mean().plot(kind='bar', color='lightblue', edgecolor='black')
plt.title('Average APU Usage for No-Delay or Early Routes')
plt.xlabel('Route')
plt.ylabel('Average APU Usage (min)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Label the dataframes with their categories
high_delay_df['CATEGORY'] = 'High Delay (>14 min)'
d_14_df['CATEGORY'] = 'Medium Delay (0–14 min)'
d0_df['CATEGORY'] = 'No Delay (≤0 min)'

# Combine all into one DataFrame
combined_df = pd.concat([high_delay_df, d_14_df, d0_df], ignore_index=True)

# Plot boxplot with defined colors
plt.figure(figsize=(9, 6))
sns.boxplot(
    data=combined_df,
    x='CATEGORY',
    y='ApuUseMinute',
    palette={'High Delay (>14 min)': 'salmon',
             'Medium Delay (0–14 min)': 'gold',
             'No Delay (≤0 min)': 'lightblue'}
)

plt.title('Distribution of APU Usage by Departure Delay Category')
plt.xlabel('Delay Category')
plt.ylabel('APU Usage (min)')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

